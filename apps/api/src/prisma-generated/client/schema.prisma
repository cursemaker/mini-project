generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma-generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model CountryPhone {
  id                       Int                       @id @default(autoincrement())
  name                     String                    @unique
  code                     String                    @unique
  mobileCode               String
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  deletedAt                DateTime?
  members                  Member[]
  creatorProfile           CreatorProfile[]
  events                   Event[]
  ticketTransactionDetails TicketTransactionDetail[]

  @@map("country_phone")
}

model Member {
  id                          String              @id @default(uuid())
  email                       String              @unique
  countryPhoneId              Int
  phoneNumber                 String              @unique
  firstName                   String
  lastName                    String?
  birthDate                   String
  eventPromoAccepted          Boolean             @default(true)
  personalDataConsentAccepted Boolean
  termsPrivacyAccepted        Boolean
  sex                         Sex
  isEmailVerified             Boolean             @default(false)
  referralNumber              String
  referralExpiryDate          DateTime
  countryPhone                CountryPhone        @relation(fields: [countryPhoneId], references: [id])
  verificationCodes           VerificationCode[]
  creatorProfile              CreatorProfile?
  ticketTransactions          TicketTransaction[]
  referralOwnerHistory        ReferralHistory[]   @relation("ReferralOwnerHistory")
  referralUserHistory         ReferralHistory[]   @relation("ReferralUserHistory")
  pointTransaction            PointsTransaction[]
  discountCoupon              DiscountCoupon[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("members")
}

enum Sex {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model ReferralHistory {
  id              String          @id @default(cuid())
  referralOwnerId String
  referralOwner   Member          @relation("ReferralOwnerHistory", fields: [referralOwnerId], references: [id])
  referralUserId  String
  referralUser    Member          @relation("ReferralUserHistory", fields: [referralUserId], references: [id])
  pointsEarned    Int             @default(10000)
  discountCoupon  DiscountCoupon?

  pointTransaction PointsTransaction?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("referral_histories")
}

model PointsTransaction {
  id                  String              @id @default(cuid())
  memberId            String
  member              Member              @relation(fields: [memberId], references: [id])
  amount              Int
  type                PointsType
  expiryDate          DateTime?
  ticketTransactionId String?
  ticketTransaction   TicketTransaction[]
  referralHistoryId   String              @unique
  referralHistory     ReferralHistory     @relation(fields: [referralHistoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum PointsType {
  EARNED
  REDEEM
}

model VerificationCode {
  id        String    @id @default(uuid())
  code      String
  email     String
  type      CodeType
  expiredAt DateTime
  isUsed    Boolean   @default(false)
  attempts  Int       @default(0)
  memberId  String?
  member    Member?   @relation(fields: [memberId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([email])
  @@index([code])
  @@map("verification_code")
}

enum CodeType {
  REGISTRATION
  LOGIN
}

model CreatorProfile {
  id                 String        @id @default(cuid())
  memberId           String        @unique
  member             Member        @relation(fields: [memberId], references: [id])
  bannerImgUrl       String?
  logoImgUrl         String?
  profileLinkUrl     String        @unique
  countryPhoneId     Int?
  countryPhone       CountryPhone? @relation(fields: [countryPhoneId], references: [id])
  creatorPhoneNumber String?
  address            String?
  aboutUsInfo        String?
  xUserName          String?
  igUserName         String?
  fbProfileUrl       String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  deletedAt          DateTime?
  event              Event[]

  @@map("creator_profile")
}

model Event {
  id                      Int                 @id @default(autoincrement())
  creatorId               String
  creator                 CreatorProfile      @relation(fields: [creatorId], references: [id])
  eventName               String
  eventFormatId           Int
  eventFormat             EventFormat         @relation(fields: [eventFormatId], references: [id])
  eventTopicId            Int
  eventTopic              EventTopic          @relation(fields: [eventTopicId], references: [id])
  eventTag                String?
  isPrivateEvent          Boolean             @default(false)
  organizerName           String
  organizerLogoImgUrl     String?
  bannerImgUrl            String?
  eventStartDate          String
  eventEndDate            String
  eventStartTime          String
  eventEndTime            String
  eventLocation           String
  eventDesc               String?
  ticketType              TicketType
  ticketName              String
  ticketQty               Int
  ticketPrice             Int                 @default(20000)
  ticketDesc              String?
  ticketTermsAndCondition String?
  ticketStartDate         String
  ticketEndDate           String
  eventCPName             String
  eventCPEmail            String
  eventCPCountryPhoneId   Int
  eventCPCountryPhone     CountryPhone        @relation(fields: [eventCPCountryPhoneId], references: [id])
  eventCPPhone            String
  idCardStatus            TicketIDCard        @default(NO_ID)
  maxTicketPerTransaction Int
  oneEmailOneTransaction  Boolean             @default(false)
  ticketDataFormUnique    Boolean             @default(false)
  isDraft                 Boolean?            @default(false)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  deletedAt               DateTime?
  ticketTransactions      TicketTransaction[]

  @@map("events")
}

enum TicketType {
  BERBAYAR
  BAYAR_SESUKAMU
  GRATIS
}

enum TicketIDCard {
  NO_ID
  WITH_ID
}

model EventFormat {
  id         Int     @id @default(autoincrement())
  formatName String
  event      Event[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("event_formats")
}

model EventTopic {
  id        Int     @id @default(autoincrement())
  topicName String
  event     Event[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("event_topics")
}

model TicketTransaction {
  id                       String                    @id @default(cuid())
  eventId                  Int
  event                    Event                     @relation(fields: [eventId], references: [id])
  memberId                 String
  member                   Member                    @relation(fields: [memberId], references: [id])
  ticketCode               String                    @unique
  ticketTransactionDetails TicketTransactionDetail[]
  pointTransactionId       String?
  pointTransaction         PointsTransaction?        @relation(fields: [pointTransactionId], references: [id])
  discountCouponId         String?
  discountCoupon           DiscountCoupon[]
  finalPrice               Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("ticket_transactions")
}

model DiscountCoupon {
  id                  String             @id @default(cuid())
  memberId            String
  member              Member             @relation(fields: [memberId], references: [id])
  name                String             @default("REFERRAL_WELCOME")
  type                CouponType         @default(REFERRAL)
  percentage          Int                @default(10)
  expiryDate          DateTime?
  isUsed              Boolean            @default(false)
  referralHistoryid   String?            @unique
  referralHistory     ReferralHistory?   @relation(fields: [referralHistoryid], references: [id])
  ticketTransactionId String?
  ticketTransaction   TicketTransaction? @relation(fields: [ticketTransactionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("discount_coupons")
}

enum CouponType {
  REFERRAL
  PROMOTIONAL
  LOYALTY
  EVENT_SPECIFIC
}

model TicketTransactionDetail {
  id                  Int               @id @default(autoincrement())
  ticketTransactionId String
  ticketTransactions  TicketTransaction @relation(fields: [ticketTransactionId], references: [id])
  orderName           String
  orderCountryPhoneId Int
  orderCountryPhone   CountryPhone      @relation(fields: [orderCountryPhoneId], references: [id])
  orderEmail          String
  orderBirthDate      String
  orderSex            Sex
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime?

  @@map("ticket_transaction_details")
}
